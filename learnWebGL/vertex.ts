//
// Generated by GPT on 2024-06-29
//
// vertext.ts
// Retrieve the canvas element and its WebGL rendering context

let canvas = null;
let gl = null;
let vsSource = null;
let fsSource = null;
let clearColor = null;

function initWebGl() {
    canvas = document.getElementById('glCanvas') as HTMLCanvasElement;
    gl = canvas.getContext('webgl');
    
    if (!gl) {
      alert("Unable to initialize WebGL. Your browser or machine may not support it.");
      throw new Error("WebGL not supported");
    }
    
    // Define the color to clear the screen to (red, green, blue, alpha)
    clearColor = [0.0, 0.0, 0.0, 1.0]; // Black
    
    // Vertex shader program
    vsSource = `
      attribute vec4 aVertexPosition;
      void main(void) {
        gl_Position = aVertexPosition;
      }
    `;
    
    // Fragment shader program
    fsSource = `
      void main(void) {
        gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0); // White color
      }
    `;
}

// Initialize a shader program
function initShaderProgram(gl: WebGLRenderingContext, vsSource: string, fsSource: string): WebGLProgram {
  const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);
  const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);

  // Create the shader program
  const shaderProgram = gl.createProgram();
  if (!shaderProgram || !vertexShader || !fragmentShader) {
    throw new Error("Error creating shader program");
  }
  
  gl.attachShader(shaderProgram, vertexShader);
  gl.attachShader(shaderProgram, fragmentShader);
  gl.linkProgram(shaderProgram);

  // Check if it linked successfully
  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
    const info = gl.getProgramInfoLog(shaderProgram);
    gl.deleteProgram(shaderProgram);
    throw new Error('Unable to initialize the shader program: ' + info);
  }

  return shaderProgram;
}

// Load a shader
function loadShader(gl: WebGLRenderingContext, type: number, source: string): WebGLShader | null {
  const shader = gl.createShader(type);
  if (!shader) {
    throw new Error("Error creating shader");
  }

  gl.shaderSource(shader, source);
  gl.compileShader(shader);

  // Check if it compiled successfully
  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    const info = gl.getShaderInfoLog(shader);
    gl.deleteShader(shader);
    throw new Error('An error occurred compiling the shaders: ' + info);
  }

  return shader;
}


// Initialize buffers
function initBuffers(gl: WebGLRenderingContext): WebGLBuffer {
  // Create a buffer for the square's positions.
  const positionBuffer = gl.createBuffer();

  // Select the positionBuffer as the one to apply buffer
  // operations to from here out.
  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);

  // Now create an array of positions for the square.
  const origin: VisPoint = new VisPoint( 0.0, 0.0, 0.0 );
  const positions = sphereVertexList( origin, 8.0 );
  /*
  [
    0.0,  1.0,  0.0,
   -1.0, -1.0, 0.0,
    1.0, -1.0, 0.0,
  ];
  */

  // Pass the list of positions into WebGL to build the
  // shape. We do this by creating a Float32Array from the
  // JavaScript array, then use it to fill the current buffer.
  gl.bufferData(gl.ARRAY_BUFFER,
                new Float32Array(positions),
                gl.STATIC_DRAW);

  return positionBuffer;
}

function sphereVertexList( origin: VisPoint, radius: number ): number[] {
  const slices: number = 16;//this.getSlices();
  const rings: number = 16;//this.getRings();
  const PI: number = <number>Math.PI;
  let rho: number;
  let drho: number;
  let theta: number;
  let dtheta: number;
  let x: number;
  let y: number;
  let z: number;
  let s: number;
  let t: number;
  let ds: number;
  let dt: number;
  let i: number;
  let j: number;
  let imin: number;
  let imax: number;
  const oX: number = origin.x;
  const oY: number = origin.y;
  const oZ: number = origin.z;
  drho = PI / rings;
  dtheta = 2.0 * PI / slices;
  //this.glBegin(GL.GL_TRIANGLE_FAN);
  //this.normal$float$float$float(0.0, 0.0, 1.0);
  
  //this.vertex$double$double$double(oX, oY, oZ + radius);
  const ret: number[] = [];
  ret.push( oX, oY, oZ + radius );
  for(j = 0; j <= slices; j++) {{
      theta = (j === slices) ? 0.0 : j * dtheta;
      x = -Math.sin(theta) * Math.sin(drho);
      y = Math.cos(theta) * Math.sin(drho);
      z = Math.cos(drho);
      //this.normal$double$double$double(x, y, z);
      //this.vertex$double$double$double(oX + x * radius, oY + y * radius, oZ + z * radius);
      ret.push( oX + x * radius, oY + y * radius, oZ + z * radius );
  };}
  //this.glEnd();
  ds = (<any>Math).fround(1.0 / slices);
  dt = (<any>Math).fround(1.0 / rings);
  t = 1.0;
  imin = 1;
  imax = rings - 1;
  for(i = imin; i < imax; i++) {{
      rho = i * drho;
      //this.glBegin(GL.GL_QUAD_STRIP);
      s = 0.0;
      for(j = 0; j <= slices; j++) {{
          theta = (j === slices) ? 0.0 : j * dtheta;
          x = -Math.sin(theta) * Math.sin(rho);
          y = Math.cos(theta) * Math.sin(rho);
          z = Math.cos(rho);
          //this.normal$double$double$double(x, y, z);
          //this.vertex$double$double$double(oX + x * radius, oY + y * radius, oZ + z * radius);
          ret.push( oX + x * radius, oY + y * radius, oZ + z * radius );
          x = -Math.sin(theta) * Math.sin(rho + drho);
          y = Math.cos(theta) * Math.sin(rho + drho);
          z = Math.cos(rho + drho);
          //this.normal$double$double$double(x, y, z);
          s += ds;
          //this.vertex$double$double$double(oX + x * radius, oY + y * radius, oZ + z * radius);
          ret.push( oX + x * radius, oY + y * radius, oZ + z * radius );
      };}
      //this.glEnd();
      t -= dt;
  };}
  //this.glBegin(GL.GL_TRIANGLE_FAN);
  //this.normal$float$float$float(0.0, 0.0, -1.0);
  //this.vertex$double$double$double(oX + 0.0, oY + 0.0, oZ + -radius);
  ret.push( oX + 0.0, oY + 0.0, oZ + -radius );
  rho = PI - drho;
  s = 1.0;
  for(j = slices; j >= 0; j--) {{
      theta = (j === slices) ? 0.0 : j * dtheta;
      x = -Math.sin(theta) * Math.sin(rho);
      y = Math.cos(theta) * Math.sin(rho);
      z = Math.cos(rho);
      //this.normal$double$double$double(x, y, z);
      s -= ds;
      //this.vertex$double$double$double(oX + x * radius, oY + y * radius, oZ + z * radius);
      ret.push(oX + x * radius, oY + y * radius, oZ + z * radius);
  };}
  //this.glEnd();
  return ret;
}


// Draw the scene
function drawScene(gl: WebGLRenderingContext, programInfo: any, buffers: any) {
  // Clear the canvas before we start drawing on it.
  gl.clearColor(clearColor[0], clearColor[1], clearColor[2], clearColor[3]);
  gl.clear(gl.COLOR_BUFFER_BIT);

  // Tell WebGL how to pull out the positions from the position
  // buffer into the vertexPosition attribute.
  {
    const numComponents = 3;  // pull out 3 values per iteration
    const type = gl.FLOAT;    // the data in the buffer is 32bit floats
    const normalize = false;  // don't normalize
    const stride = 0;         // how many bytes to get from one set of values to the next
                              // 0 = use type and numComponents above
    const offset = 0;         // how many bytes inside the buffer to start from
    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);
    gl.vertexAttribPointer(
        programInfo.attribLocations.vertexPosition,
        numComponents,
        type,
        normalize,
        stride,
        offset);
    gl.enableVertexAttribArray(
        programInfo.attribLocations.vertexPosition);
  }

  // Tell WebGL to use our program when drawing
  gl.useProgram(programInfo.program);

  // Set the shader uniforms

  {
    const offset = 0;
    const vertexCount = 3;
    gl.drawArrays(gl.TRIANGLES, offset, vertexCount);
  }
}

// Main function
// 2024-07-06 - I am not too clever. This demo renders only blackness. I
// wrote the code to create vertices for a sphere, but I still need a 
// view volume and lighting. Phooey. It's a lot of work, for what??
//
function webGlHello() {
  // Initialize WebGL
  const shaderProgram = initShaderProgram(gl, vsSource, fsSource);
  const programInfo = {
    program: shaderProgram,
    attribLocations: {
      vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),
    },
  };

  const buffers = {
    position: initBuffers(gl),
  };

  drawScene(gl, programInfo, buffers);
}



// Execute the main function
//main();
