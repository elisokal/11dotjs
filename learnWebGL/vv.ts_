//
// My prompt to GPT: At one point you fed me code to set up the view volume and the 
// lighting, but I failed to retain it. Can you send a rebroadcast?
//

// Vertex shader
const vertexShaderSource = `
  attribute vec4 a_position;
  attribute vec3 a_normal;

  uniform mat4 u_projectionMatrix;
  uniform mat4 u_modelViewMatrix;
  uniform mat4 u_normalMatrix;

  varying vec3 v_normal;
  varying vec3 v_position;

  void main() {
    // Calculate the vertex position in eye coordinates
    gl_Position = u_projectionMatrix * u_modelViewMatrix * a_position;

    // Pass the normal to the fragment shader
    v_normal = mat3(u_normalMatrix) * a_normal;

    // Pass the position to the fragment shader
    v_position = (u_modelViewMatrix * a_position).xyz;
  }
`;

// Fragment shader
const fragmentShaderSource = `
  precision mediump float;

  varying vec3 v_normal;
  varying vec3 v_position;

  uniform vec3 u_lightDirection;
  uniform vec4 u_lightColor;
  uniform vec4 u_ambientColor;

  void main() {
    // Normalize the normal
    vec3 normal = normalize(v_normal);

    // Calculate the diffuse light intensity
    float diffuse = max(dot(normal, u_lightDirection), 0.0);

    // Combine the diffuse and ambient light
    vec4 color = u_ambientColor + u_lightColor * diffuse;

    gl_FragColor = color;
  }
`;

// Set up WebGL context and compile shaders
const canvas = document.getElementById('webgl-canvas');
const gl = canvas.getContext('webgl');

// Compile shader functions omitted for brevity
const vertexShader = compileShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
const fragmentShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);

// Create program and attach shaders
const program = gl.createProgram();
gl.attachShader(program, vertexShader);
gl.attachShader(program, fragmentShader);
gl.linkProgram(program);

// Use the program
gl.useProgram(program);

// Set up the view volume and perspective projection matrix
const fieldOfView = 45 * Math.PI / 180;   // in radians
const aspect = canvas.width / canvas.height;
const zNear = 0.1;
const zFar = 100.0;
const projectionMatrix = mat4.create();
mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);

// Set up the model view matrix (camera position)
const modelViewMatrix = mat4.create();
mat4.translate(modelViewMatrix, modelViewMatrix, [0.0, 0.0, -6.0]);  // Move back 6 units

// Set up the normal matrix
const normalMatrix = mat4.create();
mat4.invert(normalMatrix, modelViewMatrix);
mat4.transpose(normalMatrix, normalMatrix);

// Pass matrices to the shader
const uProjectionMatrix = gl.getUniformLocation(program, 'u_projectionMatrix');
const uModelViewMatrix = gl.getUniformLocation(program, 'u_modelViewMatrix');
const uNormalMatrix = gl.getUniformLocation(program, 'u_normalMatrix');

gl.uniformMatrix4fv(uProjectionMatrix, false, projectionMatrix);
gl.uniformMatrix4fv(uModelViewMatrix, false, modelViewMatrix);
gl.uniformMatrix4fv(uNormalMatrix, false, normalMatrix);

// Set up lighting
const lightDirection = vec3.fromValues(-0.5, -0.5, -0.5);
vec3.normalize(lightDirection, lightDirection);

const uLightDirection = gl.getUniformLocation(program, 'u_lightDirection');
const uLightColor = gl.getUniformLocation(program, 'u_lightColor');
const uAmbientColor = gl.getUniformLocation(program, 'u_ambientColor');

gl.uniform3fv(uLightDirection, lightDirection);
gl.uniform4f(uLightColor, 1.0, 1.0, 1.0, 1.0);  // White light
gl.uniform4f(uAmbientColor, 0.2, 0.2, 0.2, 1.0);  // Ambient light

// Draw scene function omitted for brevity
drawScene(gl, program);

function drawScene(gl, program) {
  // Clear the canvas
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

  // Bind buffer, set attributes, and draw the geometry
  // Geometry setup omitted for brevity

  // Draw call
  gl.drawArrays(gl.TRIANGLES, 0, vertexCount);
}
